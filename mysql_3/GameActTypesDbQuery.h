/*
 * @file    GameActTypesDbQuery.h
 * @author  Piotr Gregor <piotrek.gregor gmail com>
 * @brief   Concrete query: fetch/extract all the log lines for a date time value passed as a string parameter and a given AccountID (passed as string parameter as well). Log lines will be returned a single string having them separated by ";" character. The log lines must be generated by replacing the place-holders in GameActionsTypes.GameActionLogText with the "parameters" read from GameActionsLog.GameActionParameters.
 */


#ifndef CGAMEACTTYPESDBQUERY_H
#define CGAMEACTTYPESDBQUERY_H


#include <stdexcept>

#include "Database.h"


class CGameActTypesDbQueryException : public std::runtime_error
{
    public:
        CGameActTypesDbQueryException(const std::string &err) : std::runtime_error(err) {}
};

class CGameActTypesDbQueryInitException : public CGameActTypesDbQueryException
{
    public:
        CGameActTypesDbQueryInitException() : CGameActTypesDbQueryException("NULL connection pointer") {}
};

class CGameActTypesDbQueryExecuteQueryException : public CGameActTypesDbQueryException
{
    public:
        CGameActTypesDbQueryExecuteQueryException(const std::string& err) : CGameActTypesDbQueryException("Query execution error: [" + err + "]") {}
};

/*
 * @brief   Execute queries on database.
 * NOTE:    this class may throw exceptions
 */
class CGameActTypesDbQuery
{
    public:
        explicit CGameActTypesDbQuery(MYSQL *con);
        std::string getLogText(const std::string& typeId);
        /*
         * @brief   Execute queries on database and return log lines containing mounted parameters.
         * @param   dt - maps to GameActionDateTime,
         * @param   accountId - maps to AccountID,
         * @param   logMark - separator of placeholders in log lines,
         * @param   paramMark - separator of placeholders in parameters list
         * @param   separator - separates log lines in result string
         * @details Errors are reported by exceptions derived from CGameActTypesDbQueryException.  
         */
        std::string executeQuery(const std::string& dt, const std::string& accountId, const std::string& logMark, const std::string& paramMark, const std::string& separator);
        ~CGameActTypesDbQuery() {}

    private:
        MYSQL *con_;
};


#endif  /* CGAMEACTTYPESDBQUERY_H */
